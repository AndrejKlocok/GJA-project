<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://xmlns.jcp.org/jsf/html"
      xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
      xmlns:p="http://primefaces.org/ui"
      xmlns:f="http://xmlns.jcp.org/jsf/core">
<h:head>
    <title>CRUD</title>
</h:head>
<h:body>
    <div class="ui-g">
        <div class="ui-g-12 ui-md-2">
            <ui:include src="/ui/components/menu.xhtml"/>
        </div>
        <div class="ui-g-12 ui-md-10 ui-g-nopad">
            <div class="ui-g-12 ui-g-nopad">
                <div class="box">
                    <h1>CRUD</h1>
                        <p>
                            V tejto časti využijeme JPA entity manager.
                        </p>
                    <h2>Persist</h2>
                    <p>
                        Pridanie študenta do databáze. Volá sa funkcia <i>insertStudent</i>, kde sa vytvorí transakcia
                        a vrámci nej sa uloží instancia študenta.<br/>
                        Alternatíva môže byť aj volanie <b>save()</b>. Podrobný popis je dostupný na
                        <h:outputLink value="https://stackoverflow.com/questions/5862680/whats-the-advantage-of-persist-vs-save-in-hibernate">persist vs save</h:outputLink>
                        <br/>
                        Príklad s využitím transakcie (podobným štýlom try catch sú riešené všetky dotazy):
                    </p>
                    <textarea rows="20" cols="100" style="border:none">
                        public boolean inserStudent(Student student) {
                            EntityTransaction tr = em.getTransaction();

                            try {
                                tr.begin();
                                em.persist(student);
                                tr.commit();
                                addMessage("Success", "Entry created");
                                return true;
                            }
                            catch (Exception e) {
                                tr.rollback();
                                e.printStackTrace();
                                addMessage("Failure", "Entry was not created");
                                return false;
                            }
                    </textarea>
                    <h2>Remove</h2>
                    <p>
                        Odstránenie študenta z db prebieha podobne, pričom najskôr nájdeme instanciu pomocou
                        query dotazu a až potom zmažeme. V prípde, že dané id nie je v db, query nám vráti null. <br/>
                        Alternatíva môže byť aj volanie <b>delete()</b> od <i>Session</i>.
                    </p>
                    <textarea rows="10" cols="100" style="border:none" >
                        Student student = getStudent(login);
                        if(student == null){
                            addMessage("Failure 404", "Entry not found");
                            return  false;
                        }
                        tr.begin();
                        em.remove(student);
                        tr.commit();
                    </textarea>
                    <h2>Merge</h2>
                    <p>
                        Persist vyžijeme keď chceme vložiť objekt do db a súčasne ho pripojiť do entity managera
                        Merge najde existujuci objekt s daným identifikátorom (PK) a aktualizuje ho, ak existuje
                        tak vráti pripojený objekt a k nie tak ho vloži do databazy.
                    </p>

                    <textarea rows="8" cols="100" style="border:none" >
                        student = studentDAO.getStudent(login);
                        tr.begin();
                        em.merge(student);
                        tr.commit();
                    </textarea>
                    <h:form>
                        <p:growl id="messages" showDetail="true"/>
                        <p:panelGrid columns="2">
                            <p:panelGrid columns="2">
                                <p:outputLabel for="name" value="Student name:" />
                                <p:inputText id="name" value="#{StudentInsert.name}" />
                                <p:outputLabel for="login" value="Student login:" />
                                <p:inputText id="login" value="#{StudentInsert.login}" >
                                    <f:validateLength maximum="8" />
                                </p:inputText>

                                <p:commandButton value="Add" icon="ui-icon-star" action="#{StudentInsert.addStudent}" ajax="false"/>
                            </p:panelGrid>

                            <p:panelGrid columns="2">
                                <p:outputLabel for="loginDel" value="Student login:" />
                                <p:inputText id="loginDel" value="#{StudentDelete.login}" />

                                <p:commandButton value="Remove" icon="ui-icon-star" action="#{StudentDelete.deleteStudent}" ajax="false"/>
                            </p:panelGrid>
                        </p:panelGrid>
                    </h:form>

                    <h:form>
                        <p:panelGrid columns="2">
                            <p:panelGrid columns="2">
                                <p:outputLabel for="login" value="Student login:" />
                                <p:inputText id="login" value="#{StudentUpdate.login}" >
                                    <f:validateLength maximum="8" />
                                </p:inputText>

                                <p:commandButton value="Find" icon="ui-icon-star" action="#{StudentUpdate.findStudent}" ajax="false"/>
                            </p:panelGrid>

                            <p:panelGrid columns="2">
                                <p:outputLabel for="login" value="Student login:" />
                                <p:outputLabel for="login" value="#{StudentUpdate.login}" />

                                <p:outputLabel for="name" value="Student name:" />
                                <p:inputText id="name" value="#{StudentUpdate.name}" />

                                <p:commandButton value="Update" icon="ui-icon-star" action="#{StudentUpdate.updateStudent}" ajax="false"/>
                            </p:panelGrid>
                        </p:panelGrid>
                    </h:form>
                    <h2>GET</h2>
                    <p>
                        Zobrazenie všetkých študentov z DB pomocou query.
                    </p>
                    <ui:include src="/ui/components/studentsView.xhtml" />

                </div>
            </div>
        </div>
    </div>
</h:body>
</html>
