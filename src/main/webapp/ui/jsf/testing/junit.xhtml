<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://xmlns.jcp.org/jsf/html"
      xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
      xmlns:p="http://primefaces.org/ui"
      xmlns:f="http://xmlns.jcp.org/jsf/core">
<h:head>
    <h:outputStylesheet library="styles" name="style.css"  />
    <h:outputStylesheet library="styles" name="highlight.min.css"  />
    <title>Selenium</title>
</h:head>
<h:body>
    <div class="ui-g">
        <div class="ui-g-12">
            <p:graphicImage name="pictures/junit.png" style="margin: auto; display: block"/>
        </div>
        <div class="ui-g-12 ui-md-2">
            <ui:include src="/ui/components/menu.xhtml"/>
        </div>
        <div class="ui-g-12 ui-md-10 ui-g-nopad">
            <div class="ui-g-12 ui-g-nopad">
                <div class="box">
                    <h1>JUnit</h1>
                    <p>
                        V tejto časti ukážeme jednoduchý príklad JUnit testovania.
                    </p>
                    <p>JUnit je testovací framework na jednotkové testy pre programovací jazyk Java. Jedná sa o instanciu xUnit testovacieho frameworku. Zohráva veľkú úlohu pri takzvanom test-driven vývoji, ale aj pri priebežnom testovaní jednotlivých funkcií systému.</p>

                    <h2>Ukážka - testovanie triedy "Accountant"</h2>
                    Spúšta sa pomocou príkazu "mvn test".
                    <p><b>AccountantTest.java</b></p>
                    <p:panelGrid columns="1">
                        <pre><code class="java">
package junit;

/* doležité je importovat použitie junit a aj konkrétný assert, ktorým používame (u viac typov použiť *) */
import static org.junit.Assert.assertEquals;
import org.junit.*;

public class AccountantTest {

    /* Testy fungujú tak, že sa vytvorí objekt,
       zavolá sa funkciu na výpočet
       porovná sa vrátený výsledok s očakávaným výsledkom */


    /* test funkcie getTaxFromIncome */
    @Test
    public void testGetTaxFromIncome () throws Throwable {

        Accountant underTest = new Accountant(1000);

        double result = underTest.getTaxFromIncome();

        assertEquals(210.0d, result, 0.0);
    }

    /* test funkcie countNewIncome */
    @Test
    public void testCountNewIncome () throws Throwable {

        Accountant underTest = new Accountant(1000);

        double rise_ratio = 1.1;
        int rating = 3;
        int worked_years = 11;

        double result = underTest.countNewIncome(rise_ratio, rating, worked_years);

        assertEquals(1580.0d, result, 0.0);
    }

    /* test funkcie getBonus */
    @Test
    public void testGetBonus () throws Throwable {

        Accountant underTest = new Accountant(1000);

        double result = underTest.getBonus(1.1);

        assertEquals(1100.0d, result, 0.0);
    }
}
                        </code></pre>
                    </p:panelGrid>

                    <p>Na ukážku trieda ktorý sa testuje, <b>Accountant.java</b>:</p>
                    <p:panelGrid columns="1">
                        <pre><code class="java">
// príklad nejakej triedy obsahujuca matematicke operacie
public class Accountant {

    private double income;

    // constructor
    public Accountant(double income) {
        this.income = income;
    }

    // getter
    public double getIncome() {
        return income;
    }

    // setter
    public void setIncome(double income) {
        this.income = income;
    }

    // výpočet daňe z výplaty
    public double getTaxFromIncome(){
        return this.income*0.21;
    }

    // výpočet nového platu
    public double countNewIncome(double rise_ratio, int rating, int worked_years){

        if (worked_years > 15){
            rise_ratio *= 1.5;
        } else if (worked_years > 10){
            rise_ratio *= 1.3;
        }
        double rise = this.income*rise_ratio + rating*50;

        rise = Math.round(rise * 100.0) / 100.0;

        return rise;

    }

    // výpočet bonusu k výplate
    public double getBonus(double bonus_ratio){
        return this.income*bonus_ratio;
    }
}

                        </code></pre>
                    </p:panelGrid>
                </div>
            </div>
        </div>
    </div>

    <h:outputScript library = "js" name = "highlight.min.js" />
    <ui:include src="/ui/components/scripts.xhtml"/>
</h:body>
</html>
