<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://xmlns.jcp.org/jsf/html"
      xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
      xmlns:f="http://xmlns.jcp.org/jsf/core"
      xmlns:p="http://primefaces.org/ui">
<h:head>
    <h:outputStylesheet library="styles" name="style.css"  />
    <h:outputStylesheet library="styles" name="highlight.min.css"  />
    <title>Query</title>
</h:head>
<h:body>
    <div class="ui-g">
        <div class="ui-g-12">
            <p:graphicImage name="pictures/hibernate.png" style="margin: auto; display: block"/>
        </div>
        <div class="ui-g-12 ui-md-2">
            <ui:include src="/ui/components/menu.xhtml"/>
        </div>
        <div class="ui-g-12 ui-md-10 ui-g-nopad">
            <div class="ui-g-12 ui-g-nopad">
                <div class="box">
                    <h1>Query</h1>
                    <p>
                        Inštancie query sú získané z factory metód entity managera. Rozhranie Query ponúka napr:
                    </p>
                    <ul>
                        <li>getResultList() – spustí dotaz, ktorý vráti viacero výsledkov</li>
                        <li>getSingleResult() – spustí dotaz a vráti jeden výsledok</li>
                        <li>executeUpdate() – spustí hromadnú aktualizáciu/zmazanie</li>
                        <li>setFirstResult() – vráti prvý výsledok</li>
                        <li>setMaxResults() – nastavý maximálny počet výsledkov</li>
                        <li>setParameter() – viazanie hodnoty na pomenovaný parameter</li>
                    </ul>
                    <p>
                        Jednoduchý dotaz na vrátenie maximálne 50 riadkov z dabulky.
                    </p>
                    <p:panelGrid columns="1">
                        <pre><code class="java">
/**
 * Method returns list of all students in db
 * @return  list of all students
 */
public List&lt;Student&gt; getAll(){
    //init list
    List&lt;Student&gt; students = new ArrayList&lt;&gt;();
    //get transaction
    EntityTransaction tr = em.getTransaction();

    try {
        //begin transaction
        tr.begin();
        //query that returns 50 results
        students = em.createQuery("Select s FROM Student s").setMaxResults(50).getResultList();
        tr.commit();
        return students;
    }
    catch (Exception e) {
        tr.rollback();
        e.printStackTrace();
        return students;
    }
}
                        </code></pre>
                    </p:panelGrid>
                    <ui:include src="/ui/components/studentsView.xhtml"/>
                    <p>
                        Dotaz na vrátenie inštancie študenta s daným loginom, ktorý je predaný dotazu ako parameter.
                    </p>
                    <p:panelGrid columns="1">
                        <pre><code class="java">
/**
 * Method returns single object of Student
 * @param loginParam    given unique property
 * @return Student object
 */
public Student getStudent(String loginParam) {
    //get transaction
    EntityTransaction tr = em.getTransaction();
    try {
        //begin transaction
        tr.begin();
        //execute query that returns single result
        Student  student = (Student) em.createQuery(
                "SELECT s from Student s where s.login = :login")
                .setParameter("login", loginParam)
                .getSingleResult();

        tr.commit();
        return student;
    }
    catch (NoResultException e) {
        tr.rollback();
        return null;
    }
}
                        </code></pre>
                    </p:panelGrid>
                    <h:form>
                        <p:growl id="messages" showDetail="true"/>
                        <p:panelGrid columns="2">
                            <p:panelGrid columns="1">
                                <f:facet name = "header">
                                    <h:outputText value = "Find"/>
                                </f:facet>
                                <p:outputLabel for="login" value="Student login:" />
                                <p:inputText id="login" value="#{StudentQuery.login}" />
                            </p:panelGrid>
                            <p:panelGrid columns="2">
                                <f:facet name = "header">
                                    <h:outputText value = "Student"/>
                                </f:facet>
                                <p:outputLabel value="Student id:" />
                                <p:outputLabel value="#{StudentQuery.id}" />
                                <p:outputLabel value="Student name:" />
                                <p:outputLabel value="#{StudentQuery.name}" />
                                <p:outputLabel value="Student login:" />
                                <p:outputLabel value="#{StudentQuery.login}" />
                                <p:outputLabel value="Student signed:" />
                                <p:outputLabel value="#{StudentQuery.signed}" />
                            </p:panelGrid>
                            <f:facet name = "footer">
                                <h:panelGroup style = "display:block; text-align:center">
                                    <p:commandButton value="Find" icon="ui-icon-star" action="#{StudentQuery.findStudent}" ajax="false"/>
                                </h:panelGroup>
                            </f:facet>
                        </p:panelGrid>
                    </h:form>


                    <h1>Named query</h1>
                    <p>
                        Pomenovaná query je staticky definovaný dotaz s preddefinovaným a nezmenitelných query reťazcom.
                        Použitie pomenovaných  dotazov namiesto dynamických môže pomôcť k lepšej organizácii kódu, oddelenie
                        javy a query reťazcov.
                    </p>
                    <p>
                        Použijeme pomenovaný dotaz na vykonanie hromadnej úpravy db (bulk update).
                    </p>
                    <p:panelGrid columns="1">
                        <pre><code class="java">
@Entity
@NamedQuery(name="Student.updateBlankName", query = "UPDATE Student S SET S.name = 'MenoStudenta' WHERE S.name =''")
public class Student implements Serializable {
...
}
/**
 * Method performs named query which updates blank name properties
 */
public void namedUpdate(){
    //get transaction
    EntityTransaction tr = em.getTransaction();
    try{
        //begin transaction
        tr.begin();
        //create update named query from local
        Query q = em.createNamedQuery("Student.updateBlankName");
        //execute
        q.executeUpdate();
        //commit changes
        tr.commit();
    }
    catch (Exception e) {
        e.printStackTrace();
        tr.rollback();
    }
}
                        </code></pre>
                    </p:panelGrid>
                    <h:form>
                        <p:commandButton value="FixEmpty" icon="ui-icon-star" action="#{StudentQuery.fixStudentvalues}" ajax="false"/>
                    </h:form>

                </div>
            </div>
        </div>
    </div>

    <h:outputScript library = "js" name = "highlight.min.js" />
    <ui:include src="/ui/components/scripts.xhtml"/>
</h:body>
</html>
