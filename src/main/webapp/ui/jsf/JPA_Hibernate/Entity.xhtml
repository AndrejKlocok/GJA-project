<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://xmlns.jcp.org/jsf/html"
      xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
      xmlns:f="http://xmlns.jcp.org/jsf/core"
      xmlns:p="http://primefaces.org/ui">
<h:head>
    <h:outputStylesheet library="styles" name="style.css"  />
    <h:outputStylesheet library="styles" name="highlight.min.css"  />
    <link rel="stylesheet" type="text/css" href="styles/style.css" />
    <title>Persist and Remove</title>
</h:head>

<h:body>
    <div class="ui-g">
        <div class="ui-g-12">
            <p:graphicImage name="pictures/hibernate.png" style="margin: auto; display: block"/>
        </div>
        <div class="ui-g-12 ui-md-2">
            <ui:include src="/ui/components/menu.xhtml"/>
        </div>
        <div class="ui-g-12 ui-md-10 ui-g-nopad">
            <div class="ui-g-12 ui-g-nopad">
                <div class="box">
                    <h1>Entity</h1>
                    <p>Javovská trieda <i>Student</i> reprezentuje tabulku v databáze. Trieda implementuje rozhranie
                        <i>Serializable</i> a súčasne je využitá anotácia ( od Hibernate):
                    </p>
                    <ul>
                        <li>
                            <i>@Entity</i>, ktorá naznačuje väzbu na tabulku a músí obsahovať bezparametrový konštruktor.
                        </li>

                        <li>
                            <i>@Id</i> (primárny kľuč). V prípade viacnásobného PK použijeme anotáciu <i>@Id</i> u daných atribútov.
                            Tiež je možné využiť <i>@GeneratedValue</i> na autoinkrement napr. PK.
                        </li>

                        <li>
                            <i>@Column</i> špecifikuje hodnotu a pridáva constraints (podmienky) ako <i>unique, nullable</i>.
                        </li>
                    </ul>
                    <p>
                        Na prácu s entitami môžeme využiť JPA <i>Entity manager</i> alebo Hibernate <i>Session</i>. V tomto tutorialy
                        využijeme oba.
                    </p>

                    <p>Príklad:</p>
                    <p:panelGrid columns="1">
                        <pre><code class="java">
@Entity
public class Student implements Serializable {
    private static final long serialVersionUID = 1L;

    // Persistent Fields:
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column( nullable=false, unique=true)
    private Long id;

    @Column( nullable=false, unique=false)
    private String name;

    @Column(nullable=false, unique=false)
    private String login;

    @Column(nullable=false, unique=false)
    private Date signed;
}
                        </code></pre>
                    </p:panelGrid>
                    <h1>Service</h1>
                    <p> Pre túto triedu(<i>Student</i>) môžeme definovať službu, ktorá komunikuje s DB</p>
                    <p:panelGrid columns="1">
                        <pre><code class="java">
public class DAO {
    //JPA
    protected EntityManagerFactory factory = Persistence.createEntityManagerFactory("StudentsPU");
    protected EntityManager em = factory.createEntityManager();

    //Hibernate
    protected SessionFactory sessionFactory = HibernateUtils.getSessionFactory();

    ...
}

@Singleton
public class StudentDAO extends DAO{
    /**
     * Method returns single object of Student
     * @param loginParam    given unique property
     * @return Student object
     */
    public Student getStudent(String loginParam) {...}

    /**
     * Method inserts student into database
     * @param student   given student object
     * @return true if entity was saved, false otherwise
     */
    public boolean inserStudent(Student student) {...}

    /**
     * Method deletes Student from database according to login property
     * @param student   given student
     * @return true if entity was removed, false otherwise
     */
    public boolean deleteStudent(Student student) {...}
    ...
}

                        </code></pre>
                    </p:panelGrid>
                </div>
            </div>
        </div>
    </div>

    <h:outputScript library = "js" name = "highlight.min.js" />
    <ui:include src="/ui/components/scripts.xhtml"/>
</h:body>
</html>

