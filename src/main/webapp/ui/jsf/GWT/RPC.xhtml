<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://xmlns.jcp.org/jsf/html"
      xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
      xmlns:p="http://primefaces.org/ui"
      xmlns:f="http://xmlns.jcp.org/jsf/core">
<h:head>
    <h:outputStylesheet library="styles" name="style.css"/>
    <h:outputStylesheet library="styles" name="highlight.min.css"/>
    <title>GWT RPC</title>
</h:head>
<h:body>
    <div class="ui-g">
        <div class="ui-g-12">
            <p:graphicImage name="pictures/gwt.png" style="margin: auto; display: block"/>
        </div>
        <div class="ui-g-12 ui-md-2">
            <ui:include src="/ui/components/menu.xhtml"/>
        </div>
        <div class="ui-g-12 ui-md-10 ui-g-nopad">
            <div class="ui-g-12 ui-g-nopad">
                <div class="box">
                    <h1>RPC</h1>

                    <p>
                        V GWT se používá "tlustý" klient a ten potřebuje komunikovat se serverem.
                        K tomu se v GWT používá RPC, které je založeno na sevrletech.
                        GWT RPC je asynchronní a klient není nikdy blokován při volání vzdálené služby.
                        Pro využití RPC je potřeba udělat 6 kroků, které jsou popsané níže.
                    </p>

                    <p>
                        Celý příklad s návodem ke spuštění je umístěn ve složce GWT-RPC.
                        Příklad demonstruje jednoduché RPC.
                        Struktura příkladu a jeho spouštění je stejné jako v případě GWT-Archetype.
                    </p>

                    <h2>Krok 1 - Vytvoření modelu</h2>

                    <p>
                        Model slouží pro přenos dat mezi klientem a serverem.
                        V GWT se přes RPC přenáší serializované Java objekty.
                    </p>

                    <p:panelGrid columns="1">
                    <pre><code class="java">
public class DeepThoughtResponse implements Serializable {

    private String result;

    public String getResult() {
        return result;
    }

    public void setResult(String result) {
        this.result = result;
    }
}

                </code></pre>
                    </p:panelGrid>

                    <h2>Krok 2 - Vytvoření Service Interface</h2>

                    <p>
                        Rozhraní služby dostupné přes RPC s anotací relativní URL adresy.
                    </p>

                    <p:panelGrid columns="1">
                    <pre><code class="java">
@RemoteServiceRelativePath("deep-thought")
public interface DeepThoughtServiceInterface extends RemoteService {

    DeepThoughtResponse getAnswerToLifeTheUniverseAndEverything();
}
                </code></pre>
                    </p:panelGrid>

                    <h2>Krok 3 - Vytvoření Async Service Interface</h2>

                    <p>
                        Klient nepoužívá přímo rozhraní vytvořené v předcházejícím kroku ale volá metody asynchronně.
                        Musíme tedy ještě vytvořit asynchronní verzi rozhraní služby, kterou bude používat klient.
                    </p>

                    <p:panelGrid columns="1">
                    <pre><code class="java">
public interface DeepThoughtServiceInterfaceAsync {

    void getAnswerToLifeTheUniverseAndEverything(AsyncCallback&lt;DeepThoughtResponse&gt; callback);
}
                </code></pre>
                    </p:panelGrid>

                    <h2>Krok 4 - Implementace Service Interface pomocí sevrletu</h2>

                    <p>
                        Volání od klienta musí obsloužit nějaký sevrlet na aplikačním serveru.
                        Tento sevrlet implementuje rozhraní vytvořené v Kroku 2.
                    </p>

                    <p:panelGrid columns="1">
                    <pre><code class="java">
public class DeepThoughtService extends RemoteServiceServlet implements DeepThoughtServiceInterface {

    public DeepThoughtResponse getAnswerToLifeTheUniverseAndEverything() {

        DeepThoughtResponse response = new DeepThoughtResponse();

        response.setResult("42");

        return response;
    }
}
                </code></pre>
                    </p:panelGrid>

                    <h2>Krok 5 - Přidání vytvořeného sevrletu do <code>web.xml</code></h2>
                    <p:panelGrid columns="1">
                    <pre><code class="xml">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;web-app xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
         xmlns:web=&quot;http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;
         xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;
         version=&quot;2.5&quot;&gt;

    &lt;!-- Servlets --&gt;
    &lt;servlet&gt;
        &lt;servlet-name&gt;deepThoughtService&lt;/servlet-name&gt;
        &lt;servlet-class&gt;cz.vutbr.fit.gja.DeepThoughtService&lt;/servlet-class&gt;
    &lt;/servlet&gt;

    &lt;servlet-mapping&gt;
        &lt;servlet-name&gt;deepThoughtService&lt;/servlet-name&gt;
        &lt;url-pattern&gt;/app/deep-thought&lt;/url-pattern&gt;
    &lt;/servlet-mapping&gt;

    &lt;!-- Default page to serve --&gt;
    &lt;welcome-file-list&gt;
        &lt;welcome-file&gt;index.html&lt;/welcome-file&gt;
    &lt;/welcome-file-list&gt;

&lt;/web-app&gt;
                </code></pre>
                    </p:panelGrid>

                    <h2>Krok 6 - Použítí v klientovi</h2>

                    <p>
                        Jak již bylo zmíněno v klientovi používáme asynchronní rozhraní a musíme definovat callbacky při úspěchu i neúspěchu volání vzdálené služby.
                    </p>

                    <p:panelGrid columns="1">
                    <pre><code class="java">
public class App implements EntryPoint {

    /**
     * Create a remote service proxy to talk to the server-side.
     */
    private final DeepThoughtServiceInterfaceAsync deepThoughtService = GWT.create(DeepThoughtServiceInterface.class);

    /**
     * This is the entry point method.
     */
    public void onModuleLoad() {

        ...

        // RPC usage
        deepThoughtService.getAnswerToLifeTheUniverseAndEverything(new AsyncCallback&lt;DeepThoughtResponse&gt;() {
            public void onFailure(Throwable caught) {
                // Show the RPC error message to the user
            }

            public void onSuccess(DeepThoughtResponse response) {
                // handle result
            }
        });
    }
}
                </code></pre>
                    </p:panelGrid>

                    <h3>Další info:</h3>
                    <a href="http://www.gwtproject.org/doc/latest/tutorial/index.html">http://www.gwtproject.org/doc/latest/tutorial/index.html</a>
                    <br/>
                    <a href="https://www.tutorialspoint.com/gwt/gwt_overview.htm">https://www.tutorialspoint.com/gwt/gwt_overview.htm</a>

                </div>
            </div>
        </div>
    </div>

    <h:outputScript library="js" name="highlight.min.js"/>
    <ui:include src="/ui/components/scripts.xhtml"/>
</h:body>
</html>