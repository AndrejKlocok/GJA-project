<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://xmlns.jcp.org/jsf/html"
      xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
      xmlns:p="http://primefaces.org/ui"
      xmlns:f="http://xmlns.jcp.org/jsf/core">
<h:head>
    <h:outputStylesheet library="styles" name="style.css"  />
    <h:outputStylesheet library="styles" name="highlight.min.css"  />
    <title>RMI Client -> Server</title>
</h:head>
<h:body>
    <div class="ui-g">
        <div class="ui-g-12">
            <p:graphicImage name="pictures/rmi.png" style="margin: auto; display: block"/>
        </div>
        <div class="ui-g-12 ui-md-2">
            <ui:include src="/ui/components/menu.xhtml"/>
        </div>
        <div class="ui-g-12 ui-md-10 ui-g-nopad">
            <div class="ui-g-12 ui-g-nopad">
                <div class="box">
                    <h1>RMI client -> server</h1>

                    <h2>Info</h2>
                    <p>
                    Java RMI je standardní implementace RPC (Remote Procedure Call) v Javě.
                    Je to mechanismus, který umožňuje objektu v jednom JVM volat metody objektu v jiném JVM ať už na lokálním stroji nebo přes síť.
                    Používá se k vytváření distribuovaných aplikací.
                    </p>

                    <h2>Setup</h2>
                    <p>
                    K použití Java RMI budeme využívat balíček java.rmi, který je v Java SDK.
                    Dále je potřeba spustit rmiregistry, který je součástí SDK.
                    Nic dalšího není potřeba
                    </p>

                    <p>
                        Celý příklad s návodem ke spuštění je umístěn ve složce RMI.
                    </p>

                    <h2>Definice vzdáleného rozhraní</h2>
                    <p>
                    Nejdříve vytvoříme interface na serveru, které bude obsahovat metody dostupné klientům.
                    Toto rozhraní musí dědit Remote a všechny metody v tomto rozhraní musí vyhazovat výjimku RemoteException.
                    </p>

                    <pre><code class="java">
/**
* Remote interface
*/
public interface DeepThoughtInterface extends Remote {

    public String getAnswerToLifeTheUniversAndEverything() throws RemoteException;
}
                    </code></pre>

                    <h2>Implementace vzdáleného rozhraní</h2>
                    <p>
                    Nyní vytvoříme na serveru implementaci tohoto rozhraní.
                    Dědíme od UnicastRemoteObject, což způsobí automatické exportování objektu (objekt bude dostupný klientům).
                    Aby vše fungovalo správně, musíme zavolat v konstruktoru rodičovský konstruktor.
                    </p>

                    <pre><code class="java">
/**
* Remote interface implementation
*/
public class DeepThought extends UnicastRemoteObject implements DeepThoughtInterface {

    public DeepThought() throws RemoteException {
        super();
    }

    public String getAnswerToLifeTheUniversAndEverything() {

        return "42";
    }
}
                    </code></pre>

                    <h2>Vytvoření serverového programu</h2>
                    <p>
                    Předchozí implementaci musíme na serveru spustit, aby mohla odpovídat na dotazy od klientů.
                    Vytvoříme tedy spouštěcí program a zaregistrujeme naší instanci v RMI Registry.
                    </p>

                    <pre><code class="java">
/**
* Server
*/
public class Server {

    /**
    * Main function
    *
    * @param args Command line arguments
    */
    public static void main(String[] args) throws RemoteException, MalformedURLException {

        // we can install security manager
        // If an RMI program does not install a security manager, RMI will not download classes
        // (other than from the local class path) for objects received as arguments or return values of
        // remote method invocations.
        /*
        if (System.getSecurityManager() == null) {
            System.setSecurityManager(new SecurityManager());
        }
        */

        try {

            // create remote object instance
            DeepThought deepThought = new DeepThought();

            // bind remote object instance of to RMI Registry
            Naming.rebind("DeepThought", deepThought);

            System.out.println("Server is ready");

        } catch (Exception e) {
            e.printStackTrace();
        }

    }
}
                    </code></pre>

                    <h2>Vytvoření klientského programu</h2>

                    <pre><code class="java">
/**
* Client
*/
public class Client {

    /**
    * Main function
    *
    * @param args Command line arguments
    */
    public static void main(String[] args) throws NotBoundException, MalformedURLException, RemoteException {

        // fing remote object in RMI Registry
        DeepThoughtInterface deepThought = (DeepThoughtInterface) Naming.lookup("//localhost/DeepThought");

        // remotely call method
        String answer = deepThought.getAnswerToLifeTheUniversAndEverything();

        System.out.println("The answer to life, the universe and everything is: " + answer);

    }
}
                    </code></pre>

                    <h3>Další info:</h3>
                    <a href="https://docs.oracle.com/javase/tutorial/rmi/">https://docs.oracle.com/javase/tutorial/rmi/</a>
                    <br/>
                    <a href="https://www.tutorialspoint.com/java_rmi">https://www.tutorialspoint.com/java_rmi</a>

                </div>
            </div>
        </div>
    </div>

    <h:outputScript library = "js" name = "highlight.min.js" />
    <ui:include src="/ui/components/scripts.xhtml"/>
</h:body>
</html>